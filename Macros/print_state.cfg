[gcode_macro PRINT_START]
gcode:
    G28
    #BED_MESH_PROFILE LOAD=default
    #HOT_CALIBRATE_START

[gcode_macro PRINT_END]
gcode:
    {% set E = params.E|default(2)|float %}
    {% set x_min = printer.toolhead.axis_minimum.x|float + 5.0 %} #maximum umbenannt in minimum und - zu +
    {% set y_min = printer.toolhead.axis_minimum.y|float + 330 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 200.0) %} # 200 zu 100
      {% set z_safe = 120.0 %}
    {% else %}
      {% set z_safe = max_z - 2 %}
    {% endif %}
    G90
    G0 X{x_min} Y{y_min} F6000 
    G1 Z{z_safe} F900 
    G91
    G1 E-{E} F2100
    
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0  #Turn off the activated carbon fan
    
    M104 S0
    M140 S0
    M141 S0

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
   # HOT_CALIBRATE_END

    M84
#    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
#	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
#	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
#	SET_STEPPER_ENABLE STEPPER=extruder enable=0

    BED_MESH_CLEAR      #Restore leveling data
    BED_MESH_PROFILE LOAD=default
    G31
    BEEP I=2 DUR=500

[gcode_macro PRINT_END_POWEROFF]
gcode:
       M107
       M104 S0
       M140 S0
       G28 Z
       M84
#       BEEP I=2 DUR=500
       M81	

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% if (printer.gcode_move.position.z) < 200 %}       ; check that zhop doesn't exceed z max
        G1 Z200 F600                                         
    {% endif %}

    G1  X0 Y0 F12000

    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(50)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
#       SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F600                                                                     ; raise Z up by z hop amount
        {% else %}
#            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        
        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1  E{e} F900                                                ; prime nozzle by E, lower Z back down
#        {% else %}                      
#            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}  
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150                           
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[pause_resume] 

[gcode_macro HOT_CALIBRATE_START]
variable_k: 0
gcode:
#    {% if k == 0 %}
 #       {% if printer['heater_generic hot'].temperature > 44 %}
 #           SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=1
 #           SET_GCODE_OFFSET Z_ADJUST=-0.10 MOVE=0
 #           SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=1
 #       {% endif %}
#    {% endif %}

[gcode_macro HOT_CALIBRATE_END]
variable_hot_set: 0
gcode:
 #   {% if  hot_set == 1 %}
 #       SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_END VARIABLE=hot_set VALUE=0
  #      SET_GCODE_OFFSET Z_ADJUST=+0.10 MOVE=0
 #       SET_GCODE_VARIABLE MACRO=HOT_CALIBRATE_START VARIABLE=k VALUE=0
 #   {% endif %}

[gcode_macro PRINT_START_QD]
gcode:
    #HOT_CALIBRATE_START